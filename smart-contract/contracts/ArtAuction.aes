contract ArtAuction =

  type is_admin = map(address, bool)

  type auction_slots = map(int, auction_slot)

  record state =
    { is_admin : is_admin
    , latest_auction_slot_id : int
    , auction_slots : auction_slots }

  record auction_slot =
    { id : int
    , time_capacity : int
    , minimum_time_per_bid : int
    , maximum_time_per_bid : int
    , successful_bids : list(bid)
    , failed_bids : list(bid)
    , start_block_height : int
    , end_block_height : int }

  record bid =
    { user : address
    , amount : int
    , time : int
    , data : artwork_data }

  record artwork_data =
    { artwork_reference : string
    , coordinates : coordinates }

  record coordinates =
    { x : int
    , y : int }

  public function init() : state =
    { is_admin = {[Call.caller] = true},
      latest_auction_slot_id = 0,
      auction_slots = {} }

  public stateful function add_auction_slot(time_capacity' : int,
                                            start_block_height' : int,
                                            block_duration : int,
                                            minimum_time_per_bid' : int,
                                            maximum_time_per_bid' : int) =
    require(is_admin(Call.caller), "add_auction_slot caller has to be admin")
    require(in_future(start_block_height'), "add_auction_slot start_block_height' has to be in future")
    require(is_greater_zero(time_capacity'), "add_auction_slot time_capacity' has to be greater than 0")
    require(is_greater_zero(block_duration), "add_auction_slot block_duration has to be greater than 0")
    require(is_greater_zero(minimum_time_per_bid'), "add_auction_slot minimum_time_per_bid' has to be greater than 0")
    require(is_greater_zero(maximum_time_per_bid'), "add_auction_slot maximum_time_per_bid' has to be greater than 0")

    let next_auction_slot_id = state.latest_auction_slot_id + 1

    let auction_slot = { id = next_auction_slot_id,
                         time_capacity = time_capacity',
                         minimum_time_per_bid = minimum_time_per_bid',
                         maximum_time_per_bid = maximum_time_per_bid',
                         successful_bids = [],
                         failed_bids = [],
                         start_block_height = start_block_height',
                         end_block_height = start_block_height' + block_duration }

    put(state{ latest_auction_slot_id = next_auction_slot_id, auction_slots[next_auction_slot_id] = auction_slot })
    next_auction_slot_id

  public function all_auction_slots() : list(auction_slot) =
    let auction_slot_list = Map.to_list(state.auction_slots)
    map(tuple_second, auction_slot_list)

  public function get_auction_slot(id : int) : auction_slot =
    switch(Map.lookup(id, state.auction_slots))
      Some(auction_slot) => auction_slot
      None => abort("auction_slot does not exist")

  public function admin_withdraw() =
    require(is_admin(Call.caller), "admin_withdraw caller has to be admin")
    let balance_to_withdraw = Contract.balance
    Chain.spend(Call.caller, balance_to_withdraw)
    balance_to_withdraw

  // helper functions //

  private function tuple_second(tuple) =
    switch(tuple)
      (_, e) => e

  private function map(f : 'a => 'b, l : list('a)) : list('b) =
    switch(l)
     [] => []
     e :: l' => f(e) :: map(f, l')

  private function is_greater_zero(x : int) : bool = x > 0

  private function in_future(height : int) : bool =
    height > Chain.block_height

  private function is_admin(address : address) : bool =
    Map.lookup_default(address, state.is_admin, false)

  private function require(b : bool, err : string) =
    if(!b) abort(err)
