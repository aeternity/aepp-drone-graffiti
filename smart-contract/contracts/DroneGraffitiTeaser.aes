contract DroneGraffitiTeaser =

  type is_admin = map(address, bool)

  type artworks = map(int, artwork)

  record state =
    { is_admin : is_admin
    , geolocation : string
    , artworks : artworks }

  record artwork =
    { user : address
    , dronetime : int
    , artwork_reference : string
    , updated_at : int }

  public function init(geolocation' : string) : state =
    { is_admin = {[Call.caller] = true},
      geolocation = geolocation',
      artworks = {} }

  public function get_geolocation() : string =
    state.geolocation

  public function all_artworks() : list(artwork) =
    let artworks_list = Map.to_list(state.artworks)
    map(tuple_second, artworks_list)

  public function get_artwork(id : int) : artwork =
    switch(Map.lookup(id, state.artworks))
      Some(artwork) => artwork
      None => abort("artwork does not exist")

  public stateful function add_artwork(artwork_id : int,
                                       dronetime' : int,
                                       artwork_reference' : string) : artwork =
    require(is_admin(Call.caller), "add_artwork caller has to be admin")

    let artwork = { user = Call.caller,
                    dronetime = dronetime',
                    artwork_reference = artwork_reference',
                    updated_at = Chain.block_height }

    put(state{ artworks[artwork_id] = artwork })
    artwork


  // internal functions //

  private function tuple_second(tuple) =
    switch(tuple)
      (_, e) => e

  private function is_admin(address : address) : bool =
    Map.lookup_default(address, state.is_admin, false)


  // general helper functions //

  private function map(f : 'a => 'b, l : list('a)) : list('b) =
    switch(l)
     [] => []
     e :: l' => f(e) :: map(f, l')

  private function require(b : bool, err : string) =
    if(!b) abort(err)
